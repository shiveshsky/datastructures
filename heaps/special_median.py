from heapq import heappop, heappush, heapify


class Solution:
    def __init__(self):
        self.minheap = []  # for max elements (elements greater than median)
        self.maxheap = []  # for min elements (elements lesser than median)
        heapify(self.minheap)
        heapify(self.maxheap)

    def resize_heaps(self, minheap, maxheap):
        if abs(len(minheap)-len(maxheap)) > 1:
            if len(minheap)>len(maxheap):
                min_pop = heappop(minheap)
                heappush(maxheap, -1*min_pop)
            else:
                max_pop = heappop(maxheap)
                heappush(minheap, -1*max_pop)

    def median(self, A, medi=None):
        if medi is None:
            heappush(self.minheap, A)
            medi = A
            return medi
        if A < medi:
            heappush(self.maxheap, -1*A)
            self.resize_heaps(self.minheap, self.maxheap)
        elif A >= medi:
            heappush(self.minheap, A)
            self.resize_heaps(self.minheap, self.maxheap)
        if len(self.minheap) == len(self.maxheap):
            min_ele = heappop(self.minheap)
            max_ele = heappop(self.maxheap)
            medi = ((-1*max_ele)+(min_ele))//2
            heappush(self.minheap, min_ele)
            heappush(self.maxheap, max_ele)
        else:
            if len(self.minheap) < len(self.maxheap):
                medi = -1*heappop(self.maxheap)
                heappush(self.maxheap, -1*medi)
            else:
                medi = heappop(self.minheap)
                heappush(self.minheap, medi)
        return medi

    def solve(self, A):
        self.minheap = []  # for max elements (elements greater than median)
        self.maxheap = []  # for min elements (elements lesser than median)
        heapify(self.minheap)
        heapify(self.maxheap)
        medi = None
        for i in range(1, len(A)):
            medi = self.median(A[i-1], medi)
            if medi == A[i]:
                return 1
        self.minheap = []  # for max elements (elements greater than median)
        self.maxheap = []  # for min elements (elements lesser than median)
        heapify(self.minheap)
        heapify(self.maxheap)
        medi = None
        for i in range(len(A)-2, -1, -1):
            medi = self.median(A[i + 1], medi)
            if medi == A[i]:
                return 1
        return 0

# class Solution:
#     def resize_heaps(self, minheap, maxheap):
#         if abs(len(minheap)-len(maxheap)) > 1:
#             if len(minheap)>len(maxheap):
#                 min_pop = heappop(minheap)
#                 heappush(maxheap, -1*min_pop)
#             else:
#                 max_pop = heappop(maxheap)
#                 heappush(minheap, -1*max_pop)
#
#     def median(self, A):
#         minheap = [] # for max elements (elements greater than median)
#         maxheap = [] # for min elements (elements lesser than median)
#         ans = []
#         heapify(minheap)
#         heapify(maxheap)
#         heappush(minheap, A[0])
#         median = A[0]
#         ans.append(median)
#         for num in A[1:]:
#             if num < median:
#                 heappush(maxheap, -1*num)
#                 self.resize_heaps(minheap, maxheap)
#             elif num >= median:
#                 heappush(minheap, num)
#                 self.resize_heaps(minheap, maxheap)
#             if len(minheap) == len(maxheap):
#                 min_ele = heappop(minheap)
#                 max_ele = heappop(maxheap)
#                 median = -1*max_ele
#                 ans.append(median)
#                 heappush(minheap, min_ele)
#                 heappush(maxheap, max_ele)
#             else:
#                 if len(minheap) < len(maxheap):
#                     median = -1*heappop(maxheap)
#                     ans.append(median)
#                     heappush(maxheap, -1*median)
#                 else:
#                     median = heappop(minheap)
#                     ans.append(median)
#                     heappush(minheap, median)
#         return ans
#     def solve(self, A):
#         forward_median =  self.median(A)
#         backA = A[::-1]
#         backward_median = self.median(backA)
#         for i in range(1, len(forward_median)):
#             if A[i] == forward_median[i-1]:
#                 return 1
#         for i in range(1, len(backward_median)):
#             if backA[i] == backward_median[i-1]:
#                 return 1
#         return 0
if __name__ == '__main__':
    print(Solution().solve([ 790277, -790035, 790268, 790980, -790000, -790579, 790190, 790464, 790465, -790056, -790722, 790723, 790392, -790423, 790802, 790333, -790355, -790442, 790676, -790297, 790289, 790182, 790925, -790534, -790871, 790030, 790257, -790233, 790990, -790614, 790965, -790369, -790619, 790849, -790997, -790106, -790870, 790908, -790750, -790115, -790364, 790832, 790333, 790936, 790782, 790396, -790246, -790809, -790511, -790600, -790303, 790905, 790306, 790035, -790034, -790815, 790049, 790566, 790574, -790672, -790535, 790119, -790486, 790755, 790263, 790791, 790305, 790716, -790411, 790293, -790552, 790306, -790518, -790321, -790780, 790417, -790346, 790425, 790933, 790449, -790363, 790735, 790123, -790933, 790025, 790392, 790257, -790556, -790386, -790863, -790622, 790747, -790798, -790560, 790938, 790426, 790322, -790958, -790287, 790546, -790013, 790494, 790973, 790670, -790062, 790945, 790180, -790535, 790804, -790598, -790798, 790053, -790908, -790669, 790658, -790077, 790263, -790206, 790163, -790814, -790977, -790536, 790711, -790251, 790227, 790986, -790681, 790300, 790218, -790061, 790583, 790949, -790686, -790887, 790468, 790757, -790588, 790282, 790343, -790968, 790260, -790923, 790930, -790734, -790068, -790540, 790740, 790882, -790219, 790811, -790167, -790332, -790606, -790585, 790843, 790823, -790351, 790291, 790993, 790219, 790833, -790196, 790753, 790428, -790053, -790001, 790645, -790737, -790768, 790755, 790387, -790550, -790971, -790721, 790263, -790987, -790378, 790100, -790119, 790739, 790709, -790161, -790765, 790469, -790370, 790626, -790561, -790719, -790617, 790293, -790236, 790334, 790358, -790307, -790742, 790335, 790426, 790211, -790496, 790625, 790195, 790941, 790355, -790496, -790040, 790767, -790119, -790924, -790222, 790787, 790933, -790496, 790469, 790055, -790678, -790668, -790284, 790660, -790865, 790115, -790785, -790887, -790689, 790485, -790905, -790259, 790108, -790406, 790894, 790277, -790094, 790589, -790004, 790727, -790132, -790639, -790187, -790613, 790433, -790345, -790904, 790123, 790397, 790545, 790780, 790445, 790400, 790286, 790980, 790302, 790067, -790499, 790303, 790122, 790712, 790129, 790435, -790995, 790261, 790762, 790000, 790343, -790662, 790182, -790555, -790225, -790992, 790193, 790516, 790036, 790294, 790827, 790809, -790243, 790879, 790967, -790145, 790436, 790117, -790301, 790170, -790552, -790632, 790280, -790467, 790428, 790586, 790800, -790059, -790379, -790761, -790137, -790368, -790402, -790344, 790035, -790752, 790323, 790589, -790224, 790284, -790123, -790636, -790169, 790240, -790667, 790131, -790153, 790612, 790443, -790861, 790304, 790022, -790026, -790639, 790481, 790190, 790087, 790670, -790188, 790201, -790356, -790550, 790653, -790542, -790365, -790060, 790932, 790188, -790365, -790198, -790179, -790594, -790578, -790781, 790715, -790581, -790836, -790522, 790415, -790382, 790802, 790278, -790039, -790017, 790493, 790320, 790742, 790767, 790530, -790476, -790901, 790509, 790252, -790422, 790046, 790379, -790992, -790955, -790809, -790766, 790008, -790704, 790426, 790166, 790793, -790432, -790729, 790136, -790733, -790035, 790449, 790037, -790697, 790938, 790562, -790018, 790031, -790988, 790320, -790110, -790270, -790668, -790089, 790407, -790317, 790552, 790898, 790422, -790892, -790252, -790683, 790078, 790827, 790149, 790878, 790872, -790240, -790142, -790860, 790290, -790030, 790038, -790032, 790547, 790232, -790256, 790386, 790041, 790410, -790106, 790621, 790284, -790505, 790454, -790826, 790008, 790878, 790501, -790251, 790527, -790359, -790023, -790721, 790796, 790246, 790419, -790902, -790201, -790776, -790614, -790835, -790578, -790015, -790284, -790091, 790728, -790592, -790496, -790334, -790951, -790014, 790522, -790671, -790968, 790749, -790499, -790567, 790039, -790880, -790443, 790920, -790238, -790003, 790260, 790707, -790977, 790074, 790021, 790946, -790488, 790104, -790167, -790534, 790920, -790824, -790139, -790170, 790010, 790344, -790074, -790382, 790762, -790305, 790932, -790342, 790690, -790201, -790546, -790848, -790077, -790185, -790940, 790409, -790948, -790351, 790572, 790041, -790060, 790501, -790144, 790074, -790989, 790616, -790740, -790221, 790085, -790978, 790821, -790734, -790747, 790441, 790791, -790891, -790340, -790437, -790184, -790424, 790362, -790374, 790491, -790662, 790080, 790739, -790399, 790839, -790895, -790780, 790413, -790507, -790869, -790337, -790526, -790503, -790808, -790249, -790418, -790777, -790223, 790148, -790465, -790789, -790138, -790449, 790294, 790067, 790933, 790873, 790743, 790791, 790816, 790466, 790311, -790775, -790930, -790637, 790916, 790945, 790242, 790049, 790162, -790042, 790076, 790237, 790821, -790832, 790666, 790162, 790139, -790697, -790640, 790855, 790056, -790265, 790767, 790090, -790151, 790504, -790403, 790766, 790920, 790234, -790429, 790991, 790437, 790645, 790818, -790360, -790132, 790079, 790762, 790301, 790272, -790893, 790506, -790546, -790072, -790741, -790434, 790291, 790454, -790093, 790951, -790233, -790728, -790241, -790066, 790163, 790243, -790945, 790536, -790346, 790947, -790393, -790032, 790380, -790845, 790344, 790320, 790234, 790606, -790977, -790312, -790067, -790120, 790997, -790598, 790919, -790396, 790062, -790600, -790260, 790603, -790765, -790229, 790340, 790699, -790110, -790620, -790620, 790137, 790215, 790659, 790231, 790905, 790757, 790537, -790913, -790663, -790558, 790701, 790973, -790050, 790528, 790437, 790952, 790395, -790368, 790408, 790700, 790835, 790780, -790268, 790541, -790602, 790290, -790088, 790543, -790105, 790950, 790396, -790798, -790713, 790057, -790556, -790420, 790489, 790268, 790241, -790791, -790404, 790361, 790768, 790672, -790720, -790698, -790992, 790718, 790240, 790944, 790608, 790777, 790043, 790958, 790927, 790759, -790692, -790467, 790602, -790898, 790928, 790923, 790210, -790648, -790539, -790295, 790092, 790297, -790315, -790416, 790055, 790757, -790962, 790672, 790249, 790276, 790329, -790609, 790290, -790276, -790344, -790972, -790791, 790726, 790527, -790044, -790912, -790617, 790656, 790640, -790386, 790542, 790770, 790572, 790263, 790970, -790031, 790673, 790513, -790327, -790311, -790840, -790275, -790779, -790083, -790331, -790488, 790647, -790435, 790229, -790185, 790618, -790081, -790388, 790859, 790508, -790940, 790638, 790479, -790971, -790966, -790073, -790513, -790761, -790150, 790594, -790137, 790484, -790454, -790015, -790685, 790893, -790093, -790333, -790349, -790369, 790895, 790027, -790213, 790499, -790680, 790212, 790223, 790120, 790677, 790977, -790407, -790626, -790556, 790421, -790733, -790830, 790174, -790647, 790598, 790693, -790436, 790764, -790034, -790759, 790223, 790066, -790391, -790763, -790590, -790766, -790038, 790192, -790676, 790294, -790001, 790392, 790160, 790992, -790259, -790079, -790971, -790138, 790336, 790808, 790029, 790760, -790160, -790512, -790985, -790625, 790712, 790626, -790844, 790009, 790538, 790977, -790906, 790417, -790960, -790785, -790417, 790163, -790788, -790063, 790788, -790358, 790579, 790340, 790281, -790224, -790069, -790102, -790188, -790423, -790240, -790863, -790634, 790335, -790866, -790027, 790950, -790119, -790474, 790462, 790743, 790644, -790079, 790244, -790384, 790276, 790175, 790960, -790502, -790932, -790897, 790878, -790742, -790291, 790524, -790137, 790605, -790876, 790814, 790717, 790702, 790464, 790557, 790445, -790256, -790978, -790338, -790463, -790309, -790625, 790417, 790723, 790652, 790594, -790011, -790744, -790223, 790771, 790668, -790903, -790462, -790329, 790509, -790685, 790434, 790243, -790330, 790261, -790307, 790069, -790733, -790533, -790203, 790814, -790577, 790132, 790169, -790906, -790681, -790058, 790078, 790560, 790231, 790312, 790403, -790405, 790765, -790275, 790305, 790343, -790151, 790614, -790992, -790995, -790686, -790149, -790841, -790824, 790343, -790811, -790947, -790306, -790218, -790844, 790066, 790640, -790740, 790579, 790027, 790949, 790381, -790670, 790730, -790883, -790915, 790749, 790284, -790004, 790693, -790327, -790197, 790351, -790256, -790477, 790940, 790953, -790110, -790085, 790626, -790185, 790754, 790496, 790934, -790403, 790813, 790028, -790515, 790190, 790868, 790899, 790105, -790558, 790544, 790770, -790584, 790242, 790389, 790707, 790360, -790935, 790227, -790699, 790548, 790003, -790768, 790957, 790002, -790611, 790076, -790621, -790301, 790166 ]))
    # print(Solution().solve([4,7,8,7]))

