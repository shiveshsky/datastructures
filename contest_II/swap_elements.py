class Solution:
    def solve(self, A, B):
        ans = []
        maxA = max(A)
        A.insert(0, 0)
        for query in B:
            idx = query[0]
            k = query[1]
            if k >= 2:
                ans.append(maxA)
            elif k == 0:
                ans.append(A[idx])
            elif k == 1:
                j = (idx // 2) + 1
                max_j = A[idx]
                if idx > 1:
                    while j > 0:
                        if (idx) % j == 0:
                            max_j = max(max_j, A[j])
                        j -= 1
                else:
                    max_j = maxA
                ans.append(max_j)
        return ans

# a = [ 61398, 43491, 58319, 50074, 15433, 42659, 18664, 30100, 58334, 41949, 33324, 44694, 38101, 55021, 27521, 60673, 68756, 41624, 13741, 37546, 32241, 37251, 49592, 46994, 61462, 47575, 56666, 35567, 47620, 49702, 38403, 41134, 52494, 32694, 26218, 59085, 50434, 38881, 37187, 46442, 65763, 43265, 16245, 52636, 40421, 44806, 26116, 56068, 52572, 34567, 58616, 27946, 25429, 69714, 13812, 13936, 51235, 55970, 67356, 13073, 32048, 28820, 19093, 64943, 23353, 46641, 44007, 42373, 84662, 23081, 80305, 26778, 22146, 46270, 45281, 55179, 55673, 51331, 54457, 48412, 43811, 61864, 30352, 64660, 29587, 52870, 45407, 39894, 34376, 35618, 40181, 26118, 59423, 38450, 32015, 61560, 59493, 20626, 20757, 29366, 60677, 27429, 33410, 41615, 54703, 51770, 50257, 26690, 40500, 53230, 55554, 57778, 40936, 52155, 33590, 36083, 71191, 27826, 29517, 37163, 44174, 45677, 51381, 38585, 40814, 34978, 35259, 40309, 39557, 55273, 60067, 18995, 58225, 21628, 25572, 41647, 12944, 14495, 57219, 51633, 63354, 25861, 52255, 49965, 74419, 26472, 49328, 19980, 38018, 56725, 70659, 44520, 71933, 26294, 44044, 42001, 32935, 27539, 35036, 54538, 23231, 9574, 61564, 21992, 41599, 19677, 22583, 54372, 62734, 72468, 42568, 44458, 38135, 44906, 25689, 34805, 34446, 32703, 57543, 49886, 53334, 48343, 67783, 53869, 34204, 51225, 76506, 55540, 41530, 60054, 52928, 37792, 58875, 15665, 52803, 28107, 15034, 37595, 37308, 53011, 59464, 22722, 78927, 63532, 47633, 9420, 37879, 33396, 31359, 33545, 45643, 30547, 35105, 20233, 33505, 44066, 67700, 50906, 41181, 60493, 64710, 33642, 27561, 65953, 48217, 52843, 62437, 37830, 63920, 46898, 40893, 54822, 44862, 42191, 59259, 62743, 44392, 17084, 43593, 21018, 35213, 41805, 31724, 32828, 38484, 43753, 61337, 37998, 37771, 47103, 67298, 41482, 73932, 56502, 52460, 29555, 46554, 46923, 17673, 29614, 17616, 29582, 28293, 22790, 59898, 8044, 71049, 32081, 52606, 55544, 44670, 57148, 72386, 50634, 50826, 42135, 78221, 61210, 39231, 45506, 62699, 50384, 20907, 50949, 23506, 50701, 14527, 27007, 42885, 48881, 34954, 59245, 25533, 43644, 50001, 62231, 46473, 45227, 45377, 30412, 22240, 16161, 43511, 65603, 61734, 71586, 37605, 37702, 19798, 26433, 33282, 29557, 54940, 55892, 29189, 63275, 38754, 33331, 38000, 36909, 49764, 72070, 40503, 30459, 46580, 37054, 24935, 60358, 42981, 53960, 10605, 20575, 16137, 63969, 24052, 39601, 52425, 13052, 32452, 67631, 70943, 68623, 44610, 46832, 48805, 47573, 54454, 63584, 55556, 22452, 48962, 49124, 37756, 50991, 40900, 54336, 55296, 25331, 35359, 22400, 62740, 51175, 59604, 42742, 22909, 72156, 35269, 55500, 17817, 65025, 17657, 43833, 71303, 32541, 55875, 26804, 36623, 26714, 57988, 32927, 49727, 65613, 46988, 32013, 42207, 70680, 25851, 47629, 41839, 35523, 30912, 62103, 28466, 48941, 54846, 17794, 55256, 15293, 42138, 39197, 38328, 76503, 47418, 69711, 38934, 20761, 8007, 23310, 34272, 48939, 41282, 51892, 4252, 48544, 21646, 30736, 55421, 14702, 33714, 38238, 68016, 40670, 49531, 60295, 57658, 46019, 62842, 32744, 42137, 34859, 51420, 56812, 28717, 47017, 27985, 46936, 47686, 56484, 53915, 28520, 24106, 56145, 69279, 34213, 16042, 32340, 19088, 68948, 45684, 47171, 43690, 15127, 32622, 15829, 31408, 39093, 37689, 60626, 25410, 55319, 59207, 21719, 17584, 23999, 65770, 28316, 45333, 68667, 40100, 27512, 34180, 30009, 76510, 36106, 60027, 58691, 57049, 48401, 68058, 17731, 36551, 41942, 42410, 11815, 44567, 55398, 62111, 40326, 43315, 40585, 31324, 22759, 25450, 41048, 35193, 37866, 38412, 34529, 36429, 59105, 14513, 28723, 34123, 34019, 74008, 27768, 27798, 60535, 34514, 32895, 48820, 54339, 50810, 30800, 48253, 22878, 24379, 26419, 21648, 18786, 50233, 26112, 54177, 23623, 39314, 22621, 49269, 68305, 30364, 8336, 42922, 35634, 34567, 68219, 23352, 66508, 52700, 65219, 27064, 19510, 33029, 56135, 62063, 39612, 12195, 72383, 45800, 55739, 46684, 45291, 67531, 38834, 32324, 28254, 41171, 26137, 74289, 46217, 61422, 47855, 57997, 2777, 25101, 43285, 14627, 26109, 52371, 42086, 47921, 38162, 45737, 48738, 47104, 60431, 58936, 42263, 30763, 66148, 51379, 46110, 54799, 33823, 12183, 45022, 36699, 37350, 45237, 51538, 30692, 31896, 23084, 58786, 23810, 40669, 39476, 56435, 48527, 47709, 55971, 16639, 53021, 52364, 37937, 68068, 37197, 56706, 32377, 43964, 37184, 28256, 47528, 31344, 39382, 65932, 43840, 25933, 52632, 36765, 52755, 57812, 44333, 40215, 40572, 39251, 48358, 25811, 27375, 52796, 40659, 19268, 49843, 75288, 52138, 36443, 55063, 57761, 36469, 58949, 54108, 37651, 24782, 35547, 56981, 76442, 72247, 53717, 38408, 55409, 34807, 55750, 49076, 14736, 12955, 30145, 37905, 36968, 48481, 52700, 59121, 69440, 33654, 59481, 32263, 59671, 20191, 36774, 49188, 25732, 52476, 51457, 73788, 35979, 44263, 28930, 34860, 77441, 44229, 51874, 59459, 20887, 43916, 43646, 51297, 49747, 69791, 60985, 46417, 45389, 60761, 14366, 25367, 33670, 77312, 27975, 49642, 59471, 21190, 53652, 69665, 40307, 58725, 62822, 55391, 61813, 21897, 41713, 18763, 32023, 48879, 52634, 53792, 68418, 40524, 43247, 51176, 40991, 21216, 48174, 45157, 44911, 73457, 52674, 44066, 29397, 40449, 49587, 41131, 29758, 44387, 41296, 66516, 33622, 4176, 25348, 52231, 68944, 63951, 12494, 52668, 29997, 41043, 51302, 67070, 35033, 25666, 26950, 71161, 32732, 47567, 40240, 54958, 26142, 64551, 42488, 43994, 30770, 35827, 55623, 58490, 34117, 37059, 71678, 54279, 63766, 56364, 23452, 67457, 54141, 21184, 47312, 23086, 42945, 47219, 46253, 60959, 38571, 49292, 59551, 52343, 47203, 66802, 49671, 45418, 74460, 44035, 16602, 51208, 71287, 69211, 45994, 55734, 33236, 35562, 15314, 13696, 19868, 30602, 45261, 54035, 66661, 37450, 49689, 38536, 36275, 52446, 6166, 53705, 62263, 35866, 21288, 40486, 20121, 53732, 32835, 51177, 23302, 45454, 44173, 57968, 65177, 47836, 32140, 66720, 30779, 34273, 23258, 31249, 15310, 27370, 57663, 45827, 44405, 68751, 49360, 49019, 44269, 80646, 33866, 21838, 34018, 32766, 57088, 22201, 38527, 63267, 40077, 22879, 53512, 36055, 34121, 22752, 18789, 56283, 60285, 50817, 26873, 51121, 54614, 27496, 60052, 48610, 30618, 59292, 66560, 36503, 29981, 37335, 63317, 49800, 38642, 54492, 32527, 28469, 61794, 33807, 26847, 34871, 19109, 42791, 29509, 38351, 53297, 34075, 49627, 48891, 66622, 48287, 31856, 29283, 21351, 46702, 60631, 78068, 68232, 60709, 20620, 24145, 27432, 33884, 51923, 47845, 39614, 11988, 49447, 36064, 55403, 44007, 61880, 46249, 33817, 10883, 23593, 50837, 41075, 48364, 39643, 51641, 30581, 49220, 43013, 42243, 27187, 64459, 16767, 58032, 48301, 64486, 65378, 34021, 64283, 27874 ]
# a[316]
'''
    int val[n];
    memset(val,0,sizeof(val));
    int max_val=0;
    for(int i=n-1;i>=0;i--)
    {
    max_val=max(max_val,A[i]);
    for(int j=1;j*j<=(i+1);j++)
    {
      if((i+1)%j==0)
      {
        val[j-1]=max(val[j-1],A[i]);
        val[i]=max(val[i],A[j-1]);
        if((i+1)/j!=j)
        {
          int temp=(i+1)/j;
          val[temp-1]=max(val[temp-1],A[i]);
          val[i]=max(val[i],A[temp-1]);
        }
      }
    }
    }
    
    ans
'''
# TODO UNDERSTAND CORRECT
class Solution:
    # @param A : list of integers
    # @param B : list of list of integers
    # @return a list of integers
    def solve(self, A, B):
        Ad=list(A)
        n=len(A)
        mxi=max(A)
        for i in range(1,n+1):
            mx=Ad[i-1]
            for j in range(i,n+1,i):
                Ad[j-1]=max(Ad[j-1],A[i-1])
                mx=max(mx,A[j-1])
            Ad[i-1]=mx
        ans=[]
        for q in B:
            if q[1]==0:
                ans.append(A[q[0]-1])
            elif q[1]==1:
                ans.append(Ad[q[0]-1])
            else:
                ans.append(mxi)
        return ans