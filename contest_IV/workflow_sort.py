from collections import OrderedDict, deque


def order_workflow_json(workflow_json):
    ordered_workflow_json = OrderedDict()
    queue = deque()
    queue.append("Start")
    visited = set()
    while len(queue) > 0:
        ele = queue.popleft()
        if ele not in visited:
            ordered_workflow_json.update({ele: workflow_json.get(ele)})
            visited.add(ele)
            for on_success in workflow_json.get(ele).get("on-success", None):
                key = list(on_success.keys())[0]
                if key != "Stop":
                    queue.append(key)
        else:
            break
    ordered_workflow_json.update({"Stop": workflow_json.get("Stop")})
    return ordered_workflow_json


if __name__ == '__main__':
    unordered_workflow = {'Stop': {'name': 'Stop',
                                   'uuid': 'cbfbd20b-e656-47cc-8006-a585af0070f8',
                                   'color': 'red',
                                   'input': {},
                                   'action': 'std.noop',
                                   'position': {'top': 556, 'left': 311},
                                   'display_name': 'Stop'},
                          'Start': {'name': 'Start',
                                    'uuid': 'b5864a92-9934-4ff3-81fb-86ecbd9eaadd',
                                    'color': 'white',
                                    'input': {},
                                    'action': 'std.noop',
                                    'position': {'top': 50, 'left': 300},
                                    'on-success': [{'extract_ips': '{{ True }}'}],
                                    'display_name': 'Start',
                                    '__output_schema': [{'name': 'id', 'type': 'integer'},
                                                        {'name': 'title', 'type': 'string'},
                                                        {'name': 'status', 'type': 'string'},
                                                        {'name': 'description', 'type': 'string'},
                                                        {'name': 'category', 'type': 'string'},
                                                        {'name': 'tlp', 'type': 'string'},
                                                        {'name': 'priority', 'type': 'string'},
                                                        {'name': 'impact', 'type': 'string'},
                                                        {'name': 'alert_source', 'type': 'string'},
                                                        {'name': 'mitre', 'type': 'array'},
                                                        {'name': 'attachments', 'type': 'array'}]},
                          'condition_4': {'name': 'condition_4',
                                          'uuid': '0666ef2e-a438-4587-8d62-22ed2400268d',
                                          'color': 'white',
                                          'input': {},
                                          'action': 'std.noop',
                                          'publish': {},
                                          'position': {'top': 297, 'left': 286},
                                          'condition': '{{ _.get_ip_type.ip_type == "PRIVATE" }}',
                                          'on-success': [
                                              {'query_customer_discover': '{{ _.get_ip_type.ip_type == "PRIVATE" }}'},
                                              {
                                                  'get_ip_report_from_virustotal': '{{ not (_.get_ip_type.ip_type == "PRIVATE") }}'}],
                                          'display_name': 'Condition 4'},
                          'extract_ips': {'id': 13,
                                          'name': 'extract_ips',
                                          'uuid': '6daf046e-e994-4ee3-8b3f-4e83e9897932',
                                          'color': 'yellow',
                                          'input': {'text': '{{ _.case.description }}',
                                                    'worknote': 'Extract IPs<br/>Inputs:<br/>text: {{ input.text }}<br/><br/>Outputs:<br/>response_code: {{ output.response_code }}<br/>ips: {{ output.ips }}<br/>',
                                                    'has_worknote': False},
                                          'action': 'extractor.ip_extractor',
                                          'publish': {'extract_ips': {'ips': '{{ task().result.ips }}',
                                                                      'response_code': '{{ task().result.response_code }}'}},
                                          'position': {'top': 111, 'left': 219},
                                          'on-success': [{'get_ip_type': '{{ True }}'}],
                                          'display_name': 'Extract IPs',
                                          '__input_schema': [{'name': 'text', 'type': 'string'},
                                                             {'name': 'has_worknote', 'type': 'boolean'},
                                                             {'name': 'worknote', 'type': 'string'}],
                                          '__output_schema': [{'name': 'response_code', 'type': 'integer'},
                                                              {'name': 'ips', 'type': 'array'}]},
                          'get_ip_type': {'id': 7,
                                          'name': 'get_ip_type',
                                          'uuid': '31b02e98-79af-42e6-8c0d-a964076a101c',
                                          'color': 'blue',
                                          'input': {'ip': '{{ _.extract_ips.ips }}',
                                                    'worknote': 'Get IP Type<br/>Inputs:<br/>ip: {{ input.ip }}<br/><br/>Outputs:<br/>ip_type: {{ output.ip_type }}<br/>ip: {{ output.ip }}<br/>',
                                                    'has_worknote': False},
                                          'action': 'sporactv2.get_ip_type',
                                          'publish': {'get_ip_type': {'ip': '{{ task().result.ip }}',
                                                                      'ip_type': '{{ task().result.ip_type }}'}},
                                          'position': {'top': 208, 'left': 229},
                                          'on-success': [{'condition_4': '{{ True }}'}],
                                          'display_name': 'Get IP Type',
                                          '__input_schema': [{'name': 'ip', 'type': 'string'},
                                                             {'name': 'has_worknote', 'type': 'boolean'},
                                                             {'name': 'worknote', 'type': 'string'}],
                                          '__output_schema': [{'name': 'ip_type', 'type': 'string'},
                                                              {'name': 'ip', 'type': 'string'}]},
                          'query_customer_discover': {'id': 8,
                                                      'name': 'query_customer_discover',
                                                      'uuid': '62dfdfec-8d40-441a-888d-62be3ec8df4d',
                                                      'color': 'blue',
                                                      'input': {'ip': '{{ _.condition_4.success.data.ip }}',
                                                                'worknote': 'Query Customer Discover<br/>Inputs:<br/>ip: {{ input.ip }}<br/><br/>Outputs:<br/>ip: {{ output.ip }}<br/>asset_owner: {{ output.asset_owner }}<br/>asset_department: {{ output.asset_department }}<br/>asset_description: {{ output.asset_description }}<br/>os: {{ output.os }}<br/>',
                                                                'has_worknote': False},
                                                      'action': 'sporactv2.query_customer_discovery',
                                                      'publish': {
                                                          'query_customer_discover': {'ip': '{{ task().result.ip }}',
                                                                                      'os': '{{ task().result.os }}',
                                                                                      'asset_owner': '{{ task().result.asset_owner }}',
                                                                                      'asset_department': '{{ task().result.asset_department }}',
                                                                                      'asset_description': '{{ task().result.asset_description }}'}},
                                                      'position': {'top': 389, 'left': 122},
                                                      'on-success': [{'Stop': '{{ True }}'}],
                                                      'display_name': 'Query Customer Discover',
                                                      '__input_schema': [{'name': 'ip', 'type': 'string'},
                                                                         {'name': 'has_worknote', 'type': 'boolean'},
                                                                         {'name': 'worknote', 'type': 'string'}],
                                                      '__output_schema': [{'name': 'ip', 'type': 'string'},
                                                                          {'name': 'asset_owner', 'type': 'string'},
                                                                          {'name': 'asset_department',
                                                                           'type': 'string'},
                                                                          {'name': 'asset_description',
                                                                           'type': 'string'},
                                                                          {'name': 'os', 'type': 'string'}]},
                          'get_ip_report_from_virustotal': {'id': 2,
                                                            'name': 'get_ip_report_from_virustotal',
                                                            'uuid': 'f6fe2777-65a4-4266-8761-bae8d08d4ed4',
                                                            'color': 'yellow',
                                                            'input': {
                                                                'worknote': 'Get IP report from VirusTotal<br/>Inputs:<br/>ip_address: {{ input.ip_address }}<br/><br/>Outputs:<br/>response_code: {{ output.response_code }}<br/>as_owner: {{ output.as_owner }}<br/>asn: {{ output.asn }}<br/>country: {{ output.country }}<br/>continent: {{ output.continent }}<br/>last_analysis_results: {{ output.last_analysis_results }}<br/>last_analysis_stats: {{ output.last_analysis_stats }}<br/>last_modification_date: {{ output.last_modification_date }}<br/>network: {{ output.network }}<br/>regional_internet_registry: {{ output.regional_internet_registry }}<br/>reputation: {{ output.reputation }}<br/>tags: {{ output.tags }}<br/>total_votes: {{ output.total_votes }}<br/>whois: {{ output.whois }}<br/>whois_date: {{ output.whois_date }}<br/>',
                                                                'ip_address': '{{ _.condition_4.fail.data.ip }}',
                                                                'has_worknote': False},
                                                            'action': 'vtv3.get_ip_report',
                                                            'publish': {'get_ip_report_from_virustotal': {
                                                                'asn': '{{ task().result.asn }}',
                                                                'tags': '{{ task().result.tags }}',
                                                                'whois': '{{ task().result.whois }}',
                                                                'country': '{{ task().result.country }}',
                                                                'network': '{{ task().result.network }}',
                                                                'as_owner': '{{ task().result.as_owner }}',
                                                                'continent': '{{ task().result.continent }}',
                                                                'reputation': '{{ task().result.reputation }}',
                                                                'whois_date': '{{ task().result.whois_date }}',
                                                                'total_votes': '{{ task().result.total_votes }}',
                                                                'response_code': '{{ task().result.response_code }}',
                                                                'last_analysis_stats': '{{ task().result.last_analysis_stats }}',
                                                                'last_analysis_results': '{{ task().result.last_analysis_results }}',
                                                                'last_modification_date': '{{ task().result.last_modification_date }}',
                                                                'regional_internet_registry': '{{ task().result.regional_internet_registry }}'}},
                                                            'position': {'top': 410.0381774902344,
                                                                         'left': 497.0104064941406},
                                                            'on-success': [{'Stop': '{{ True }}'}],
                                                            'display_name': 'Get IP report from VirusTotal',
                                                            '__input_schema': [{'name': 'ip_address', 'type': 'string'},
                                                                               {'name': 'has_worknote',
                                                                                'type': 'boolean'},
                                                                               {'name': 'worknote', 'type': 'string'}],
                                                            '__output_schema': [
                                                                {'name': 'response_code', 'type': 'integer'},
                                                                {'name': 'as_owner', 'type': 'string'},
                                                                {'name': 'asn', 'type': 'string'},
                                                                {'name': 'country', 'type': 'string'},
                                                                {'name': 'continent', 'type': 'string'},
                                                                {'name': 'last_analysis_results', 'type': 'object'},
                                                                {'name': 'last_analysis_stats', 'type': 'object'},
                                                                {'name': 'last_modification_date', 'type': 'integer'},
                                                                {'name': 'network', 'type': 'string'},
                                                                {'name': 'regional_internet_registry',
                                                                 'type': 'string'},
                                                                {'name': 'reputation', 'type': 'integer'},
                                                                {'name': 'tags', 'type': 'array'},
                                                                {'name': 'total_votes', 'type': 'object'},
                                                                {'name': 'whois', 'type': 'string'},
                                                                {'name': 'whois_date', 'type': 'integer'}]}}
    print(order_workflow_json(unordered_workflow))
